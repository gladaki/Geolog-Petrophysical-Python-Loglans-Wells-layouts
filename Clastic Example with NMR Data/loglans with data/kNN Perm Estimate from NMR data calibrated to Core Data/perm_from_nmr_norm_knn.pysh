#!/usr/bin/env python3
# python loglan


# Imports
import geolog
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math

k=0

# Load data from geolog
while geolog.getrow():

    # =============================================================================
    # # ===========================================================================
    # # #--------------------------------------------------------------------------
    # # #           
    # # #            Read in NMR log data from Geolog
    # # #                   
    # # #--------------------------------------------------------------------------
    # # ===========================================================================
    # =============================================================================
    Por = mphi
    Cmff = ffi



    # =============================================================================
    # # ===========================================================================
    # # #-------------------------------------------------------------------------- 
    # # #        Read in Reference data (_r) from csv file
    # # #        Read in the reference NMR and Core data which has the Core Kair 
    # # #        The Core data is only available for the upper half of well
    # # #--------------------------------------------------------------------------
    # # ===========================================================================
    # =============================================================================
    core_NMR_data = pd.read_csv('./data/RSWC_CMR.csv')
    #core_NMR_data = pd.read_csv('RSWC_CMR.csv').to_numpy

    Dep_r = core_NMR_data['DEPTH']
    Por_r = core_NMR_data['CMRP_3ms']
    Cmff_r = core_NMR_data['CMFF']
    Bvi_r = core_NMR_data['BVI']
    Kair_r = core_NMR_data['Kair']
    Porosity_r = core_NMR_data['Cpor']


    x=np.array(Por_r)
    y=np.array(Cmff_r)
    z=np.array(Kair_r)
    
    if k == 0:
        plt.figure(1,figsize=(5,8))    
        plt.scatter(x, y, c=z, s=z, alpha=0.5)
        plt.xlim(0, por_max)
        plt.ylim(0, por_max)
        plt.title("Bubbles and Colors are Core Kair on Z-axis")
        plt.ylabel('NMR FFI')
        plt.xlabel('NMR Effective Porosity')
        plt.grid(True)
        plt.show()
        
        k=k+1




    # =============================================================================
    # # ===========================================================================
    # # #--------------------------------------------------------------------------
    # # #
    # # #            This is the beginnin of kNN for Permeability Estimations
    # # #
    # # #--------------------------------------------------------------------------
    # # ===========================================================================
    # =============================================================================
        

    permarray  = []
    porarray   = []

    inv_dist_array = []
    distance_knn_array = []


    #for k in range(0,len(NMR_data) ,1):  
    por = ((Por -  por_min)/(por_max - por_min))
    ffi = ((Cmff - por_min)/(por_max - por_min))

    dist_inv    = []
    dist_phi    = []
    dist_ffi    = []
    Perm_weight = []
    Por_r_norm  = []
    Cmff_r_norm = []

    dist_inv_total = 0
    Perm_total     = 0

    #this is the reference_data being used with kNN
    for i in range(0,len(core_NMR_data),1): 

        # Normalize the core reference data of Por_r and Cmff_r
        Por_r_norm.append((Por_r[i]   -  por_min)/(por_max - por_min))
        Cmff_r_norm.append((Cmff_r[i] -  por_min)/(por_max - por_min))
                              
        # Compute Euclidian Distance inverse distance
        dist_phi.append(abs(por - Por_r_norm[i]))
        dist_ffi.append(abs(ffi - Cmff_r_norm[i]))
        dist_inv.append(1/(math.sqrt(dist_phi[i]**2 + dist_ffi[i]**2) + 0.0000001))

        # Calculalte inverse distance weights for perm
        Perm_weight.append(dist_inv[i]  * Kair_r[i])
        inv_dist_array.append(dist_inv[i]);  # add items

        # =============================================================================
        ###                    KNN Array for all data
        # # ===========================================================================
        # # #--------------------------------------------------------------------------
        distance_knn_array = [dist_inv, Perm_weight]
        #
        # # #--------------------------------------------------------------------------
        # # ===========================================================================
        # =============================================================================

    # =============================================================================
    # # ===========================================================================
    # # #--------------------------------------------------------------------------
    # # #           
    # # #               Transpose and Sort kNN array
    # # #                   
    # # #--------------------------------------------------------------------------
    # # ===========================================================================
    # =============================================================================

    #knn_array = np.transpose array
    knn_array = np.transpose(distance_knn_array)

    #matsor x[x[:,column].argsort()[::-1]] and -1 us reverse order
    mat_sort = knn_array[knn_array[:,0].argsort()[::-1]] #firt column reverse sort (-1)

    # =============================================================================
    # # ===========================================================================
    # # #--------------------------------------------------------------------------
    # # #           
    # # #               Calculate knn Thomeer Parameters
    # # #                   
    # # #--------------------------------------------------------------------------
    # # ===========================================================================
    # =============================================================================
    #------------------------------------------------------------------------------
    #    Number of nearest Neighbors set in loglan constans
    #------------------------------------------------------------------------------
    #n_neighbors = 3
    #------------------------------------------------------------------------------

    dist_inv_total_knn = 0
    Perm_total_knn = 0


    #kNN Estimates for first n rows

    for i in range(0,n_neighbors,1):
        dist_inv_total_knn = dist_inv_total_knn + mat_sort[i][0]
        Perm_total_knn  = Perm_total_knn + mat_sort[i][1]

    #back to k values and calculate estimations now
    perm_est_knn  = Perm_total_knn  / dist_inv_total_knn

  
    # Store data into geolog
    geolog.putrow()














